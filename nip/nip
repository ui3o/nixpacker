#!/usr/bin/env python3

# todo
import sys
import os.path
import subprocess
import json
import hashlib


def msg(msg: str, isError: bool = False):
    if isError:
        print(f"[ERROR] {msg}")
    else:
        print(f"[INFO] {msg}")
    sys.stdout.flush()


def execute(cmd):
    # info(f"[RUN] {cmd}")
    subprocess.run(cmd, shell=True)


NIP_INSTALL = os.environ.get("NIP_INSTALL", "/nix")
WAREHOUSE_PATH = f"{NIP_INSTALL}/warehouse"
CONFIG_PATH = os.path.expanduser("~/.config/nip")
sys.dont_write_bytecode = True
sys.path.insert(0, CONFIG_PATH)
msg(f"NIP_INSTALL is {NIP_INSTALL}")
if not os.path.exists(CONFIG_PATH):
    msg(f"CONFIG_PATH does not exist: {CONFIG_PATH}. Start to create!", isError=True)
    execute(f"mkdir -p {CONFIG_PATH}")
    execute(f"cp ~/.nip/warehouse/nip/config.py {CONFIG_PATH}/")
    execute(f"cp ~/.nip/warehouse/nip/typings.py {CONFIG_PATH}/")
import config  # noqa: E402


def imagePull(tags: list[str]):
    execute(f"mkdir -p {WAREHOUSE_PATH}")
    # check if docker image was pulled
    podman = "podman run --pull=always"
    # podman = "podman run --privileged"
    for tag in tags:
        # image = f"localhost/local-nixpacker:{tag}"
        image = f"ui3o/nixpacker:{tag}"
        if (
            os.path.exists(f"{WAREHOUSE_PATH}/nip/{tag}.info")
            is False
        ):
            msg(f"pull and run docker image: {image}")
            execute(f"{podman} --rm -v {WAREHOUSE_PATH}:/warehouse:Z -it {image}")
        else:
            msg(f"this docker image already pulled: {image}")


def createWarehouseLink(warehouse: str, generationStorePath: str):
    # generate symlinks to /nix/store
    packs = [f.name for f in os.scandir(warehouse) if f.is_dir() and f.name != "nip"]
    for dirname in list(packs):
        msg(f"generate symlink for: {dirname}")
        execute(f"ln -snf {warehouse}/{dirname} {generationStorePath}/{dirname}")


def createBinLinks(generationPath: str, base: str):
    packs = [f.name for f in os.scandir(f"{generationPath}/store/{base}/bin")]
    for bin in list(packs):
        msg(f"generate binary symlink for: {bin}")
        execute(
            f"ln -snf {generationPath}/store/{base}/bin/{bin} {generationPath}/store/nip/{bin}"
        )

# it copies NIP files (pulled image info, current nip version) from the warehouse to the generation path
def cpWarehouseNipFiles(warehouse_nip: str, generationPath: str):
    packs = [f.name for f in os.scandir(warehouse_nip) if f.name != "nip"]
    for file in list(packs):
        msg(f"copy warehouse file: {file}")
        execute(f"cp {warehouse_nip}/{file} {generationPath}/store/nip/{file}")


def createGeneration(
    tags: list[str],
    defaults: dict[str, list[str]],
) -> str:
    # check if docker image was pulled
    defToJson = json.dumps(tags) + json.dumps(defaults)
    md5sum = hashlib.md5(defToJson.encode("utf-8")).hexdigest()
    generationPath = os.path.expanduser(f"~/.nip/generations/{md5sum}")

    # create generation link in container
    execute("mkdir -p ~/.nip/generations")
    execute(f"ln -snf {generationPath}/store {NIP_INSTALL}/store")
    execute(f"ln -snf {generationPath}/defaults {NIP_INSTALL}/defaults")

    if os.path.isdir(generationPath) is False:
        msg("create generation")
        imagePull(tags)
        execute(f"mkdir -p {generationPath}/store/nip {generationPath}/defaults")
        createWarehouseLink(WAREHOUSE_PATH, f"{generationPath}/store")

        for name, default in defaults.items():
            base = default[0]
            msg(f"create defaults symlink for: {base} as {name} in {generationPath}/defaults")
            # create symlink for default
            execute(
                f"ln -snf {generationPath}/store/{base} {generationPath}/defaults/{name}"
            )
            createBinLinks(generationPath, base)
            for d in default[1:]:
                msg(f"overriding symlink for: {d}")
                execute(
                    f"ln -snf {generationPath}/store/{base} {generationPath}/store/{d}"
                )
        cpWarehouseNipFiles(f"{WAREHOUSE_PATH}/nip", generationPath)
        # it copies current nip config into <generationPath>/store/nip
        execute(f"cp -a {CONFIG_PATH}/. {generationPath}/store/nip")
        execute(f"touch {generationPath}/store/nip/{md5sum}.hash")

    return md5sum


execute(f"mkdir -p {NIP_INSTALL}")

# create link generation
md5sum = createGeneration(
    config.config["tags"],
    config.config["defaults"],
)

msg(f"current generation is {md5sum}")
